{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e11a4fd2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-12T12:33:26.076180Z",
     "iopub.status.busy": "2025-09-12T12:33:26.075246Z",
     "iopub.status.idle": "2025-09-12T12:33:27.999220Z",
     "shell.execute_reply": "2025-09-12T12:33:27.998093Z"
    },
    "papermill": {
     "duration": 1.9293,
     "end_time": "2025-09-12T12:33:28.000831",
     "exception": false,
     "start_time": "2025-09-12T12:33:26.071531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S14/S14.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S11/S11.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S13/S13.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S10/S10.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S8/S8.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S5/S5.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S7/S7.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S9/S9.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S15/S15.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S2/S2.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S6/S6.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S3/S3.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S4/S4.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S16/S16.pkl\n",
      "/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S17/S17.pkl\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        if \".pkl\" in filename:\n",
    "            print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "075b492b",
   "metadata": {
    "papermill": {
     "duration": 0.001828,
     "end_time": "2025-09-12T12:33:28.004915",
     "exception": false,
     "start_time": "2025-09-12T12:33:28.003087",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "458df6d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-12T12:33:28.010414Z",
     "iopub.status.busy": "2025-09-12T12:33:28.009929Z",
     "iopub.status.idle": "2025-09-12T13:25:58.461183Z",
     "shell.execute_reply": "2025-09-12T13:25:58.459247Z"
    },
    "papermill": {
     "duration": 3150.459957,
     "end_time": "2025-09-12T13:25:58.466636",
     "exception": false,
     "start_time": "2025-09-12T12:33:28.006679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-12 12:33:31.627219: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1757680411.868699      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1757680411.944305      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Folds: ['S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S9', 'S10', 'S13', 'S14', 'S15', 'S16', 'S17']\n",
      "\n",
      "=== Test: S2 ===\n",
      "  Train windows: 1773 | Test windows: 141 | Pos.rate(train)=0.302\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-12 12:36:16.827756: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  AUC=0.996 | F1(stress)=0.610 | P=1.000 R=0.439\n",
      "\n",
      "=== Test: S3 ===\n",
      "  Train windows: 1770 | Test windows: 144 | Pos.rate(train)=0.302\n",
      "  AUC=0.873 | F1(stress)=0.645 | P=0.500 R=0.907\n",
      "\n",
      "=== Test: S4 ===\n",
      "  Train windows: 1770 | Test windows: 144 | Pos.rate(train)=0.302\n",
      "  AUC=1.000 | F1(stress)=0.977 | P=0.956 R=1.000\n",
      "\n",
      "=== Test: S5 ===\n",
      "  Train windows: 1766 | Test windows: 148 | Pos.rate(train)=0.302\n",
      "  AUC=0.977 | F1(stress)=0.932 | P=0.911 R=0.953\n",
      "\n",
      "=== Test: S6 ===\n",
      "  Train windows: 1767 | Test windows: 147 | Pos.rate(train)=0.302\n",
      "  AUC=0.732 | F1(stress)=0.647 | P=0.478 R=1.000\n",
      "\n",
      "=== Test: S7 ===\n",
      "  Train windows: 1767 | Test windows: 147 | Pos.rate(train)=0.302\n",
      "  AUC=1.000 | F1(stress)=0.619 | P=0.448 R=1.000\n",
      "\n",
      "=== Test: S9 ===\n",
      "  Train windows: 1768 | Test windows: 146 | Pos.rate(train)=0.302\n",
      "  AUC=0.985 | F1(stress)=0.208 | P=1.000 R=0.116\n",
      "\n",
      "=== Test: S10 ===\n",
      "  Train windows: 1762 | Test windows: 152 | Pos.rate(train)=0.300\n",
      "  AUC=0.814 | F1(stress)=0.701 | P=0.964 R=0.551\n",
      "\n",
      "=== Test: S13 ===\n",
      "  Train windows: 1765 | Test windows: 149 | Pos.rate(train)=0.302\n",
      "  AUC=1.000 | F1(stress)=0.917 | P=0.846 R=1.000\n",
      "\n",
      "=== Test: S14 ===\n",
      "  Train windows: 1765 | Test windows: 149 | Pos.rate(train)=0.301\n",
      "  AUC=0.625 | F1(stress)=0.000 | P=0.000 R=0.000\n",
      "\n",
      "=== Test: S15 ===\n",
      "  Train windows: 1765 | Test windows: 149 | Pos.rate(train)=0.301\n",
      "  AUC=1.000 | F1(stress)=0.905 | P=1.000 R=0.826\n",
      "\n",
      "=== Test: S16 ===\n",
      "  Train windows: 1766 | Test windows: 148 | Pos.rate(train)=0.301\n",
      "  AUC=1.000 | F1(stress)=1.000 | P=1.000 R=1.000\n",
      "\n",
      "=== Test: S17 ===\n",
      "  Train windows: 1764 | Test windows: 150 | Pos.rate(train)=0.300\n",
      "  AUC=0.154 | F1(stress)=0.485 | P=0.320 R=1.000\n",
      "\n",
      "=== LOSO Summary ===\n",
      "test_subject      auc  precision_pos  recall_pos   f1_pos  support_pos\n",
      "         S10 0.813553       0.964286    0.551020 0.701299           49\n",
      "         S13 1.000000       0.846154    1.000000 0.916667           44\n",
      "         S14 0.624786       0.000000    0.000000 0.000000           45\n",
      "         S15 1.000000       1.000000    0.826087 0.904762           46\n",
      "         S16 1.000000       1.000000    1.000000 1.000000           45\n",
      "         S17 0.153799       0.320000    1.000000 0.484848           48\n",
      "          S2 0.996098       1.000000    0.439024 0.610169           41\n",
      "          S3 0.873129       0.500000    0.906977 0.644628           43\n",
      "          S4 1.000000       0.955556    1.000000 0.977273           43\n",
      "          S5 0.977187       0.911111    0.953488 0.931818           43\n",
      "          S6 0.732348       0.478261    1.000000 0.647059           44\n",
      "          S7 1.000000       0.447917    1.000000 0.618705           43\n",
      "          S9 0.985324       1.000000    0.116279 0.208333           43\n"
     ]
    }
   ],
   "source": [
    "# =======================\n",
    "# LSTM Stress Detection (WESAD, Kaggle paths)\n",
    "# =======================\n",
    "import os, re, pickle, numpy as np, pandas as pd\n",
    "from scipy.signal import resample_poly\n",
    "from sklearn.utils.class_weight import compute_class_weight\n",
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models, callbacks\n",
    "\n",
    "# -------- Pfade vom Nutzer (unverändert übernehmen) --------\n",
    "file_path = ['/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S14/S14.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S13/S13.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S10/S10.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S5/S5.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S7/S7.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S9/S9.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S15/S15.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S2/S2.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S6/S6.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S3/S3.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S4/S4.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S16/S16.pkl',\n",
    "             '/kaggle/input/wesad-wearable-stress-affect-detection-dataset/WESAD/S17/S17.pkl'\n",
    "            ]\n",
    "\n",
    "# -------- Hyperparameter / Settings --------\n",
    "WRIST_STREAMS = [\"EDA\", \"BVP\", \"TEMP\"]        # optional \"ACC\" hinzufügen\n",
    "TARGET_SR = 4                                  # Hz\n",
    "WINDOW_SEC, STEP_SEC = 60, 15                  # 60s Fenster, 15s Schritt\n",
    "WINDOW_SAMPLES = TARGET_SR * WINDOW_SEC\n",
    "STEP_SAMPLES   = TARGET_SR * STEP_SEC\n",
    "STRESS_LABEL = 2\n",
    "VALID_LABELS = {1:\"baseline\", 2:\"stress\", 3:\"amusement\"}  # Meditation (4) ggf. adden\n",
    "\n",
    "# WESAD E4 Samplingraten\n",
    "SR_MAP = {\"EDA\":4, \"TEMP\":4, \"BVP\":64, \"ACC\":32}\n",
    "\n",
    "# -------- Loader: eine Sx.pkl in (T, n_features) @4Hz + Label-Vektor mappen --------\n",
    "def load_wesad_subject_pkl(pkl_path):\n",
    "    with open(pkl_path, \"rb\") as f:\n",
    "        data = pickle.load(f, encoding=\"latin1\")\n",
    "    wrist = data[\"signal\"][\"wrist\"]\n",
    "    labels = data[\"label\"]  # lange Folge (0,1,2,3,...) – wir mappen auf Länge von X\n",
    "    feats = []\n",
    "    for s in WRIST_STREAMS:\n",
    "        x = wrist[s]\n",
    "        sr = SR_MAP[s]\n",
    "        if s == \"ACC\" and x.ndim == 2:\n",
    "            res = np.column_stack([resample_poly(x[:,i], TARGET_SR, sr) for i in range(x.shape[1])])\n",
    "        else:\n",
    "            res = resample_poly(x.squeeze(), TARGET_SR, sr).reshape(-1,1)\n",
    "        feats.append(res)\n",
    "    X = np.concatenate(feats, axis=1)  # (T, n_features)\n",
    "\n",
    "    # Labels per \"nearest\" auf Länge von X bringen\n",
    "    lab = labels.astype(float)\n",
    "    idx = np.round(np.linspace(0, len(lab)-1, num=len(X))).astype(int)\n",
    "    lab_res = pd.Series(lab).reindex(idx).ffill().bfill().to_numpy().astype(int)\n",
    "    return X, lab_res\n",
    "\n",
    "# -------- Fensterung + Mehrheitslabel (Stress vs. Non-Stress) --------\n",
    "def window_data(X, y, win=WINDOW_SAMPLES, step=STEP_SAMPLES):\n",
    "    xs, ys = [], []\n",
    "    for start in range(0, len(X)-win+1, step):\n",
    "        seg = X[start:start+win]\n",
    "        lab = y[start:start+win]\n",
    "        vals, counts = np.unique(lab, return_counts=True)\n",
    "        maj = vals[np.argmax(counts)]\n",
    "        if maj in VALID_LABELS:\n",
    "            xs.append(seg)\n",
    "            ys.append(1 if maj==STRESS_LABEL else 0)\n",
    "    return np.array(xs), np.array(ys)\n",
    "\n",
    "# -------- Z-Score Normalisierung (fit auf Train, apply auf Test) --------\n",
    "def zscore_fit_transform(train_segments, test_segments):\n",
    "    mean = train_segments.reshape(-1, train_segments.shape[-1]).mean(axis=0)\n",
    "    std  = train_segments.reshape(-1, train_segments.shape[-1]).std(axis=0) + 1e-8\n",
    "    return (train_segments-mean)/std, (test_segments-mean)/std, mean, std\n",
    "\n",
    "# -------- LSTM Modell --------\n",
    "def make_lstm_model(timesteps, n_features, hidden=64, dropout=0.3):\n",
    "    inp = layers.Input(shape=(timesteps, n_features))\n",
    "    x = layers.Masking()(inp)\n",
    "    x = layers.LSTM(hidden, return_sequences=True)(x)\n",
    "    x = layers.Dropout(dropout)(x)\n",
    "    x = layers.LSTM(hidden)(x)\n",
    "    x = layers.Dropout(dropout)(x)\n",
    "    x = layers.Dense(64, activation=\"relu\")(x)\n",
    "    out = layers.Dense(1, activation=\"sigmoid\")(x)\n",
    "    model = models.Model(inp, out)\n",
    "    model.compile(\n",
    "        optimizer=tf.keras.optimizers.Adam(1e-3),\n",
    "        loss=\"binary_crossentropy\",\n",
    "        metrics=[\"accuracy\",\n",
    "                 tf.keras.metrics.AUC(name=\"auc\"),\n",
    "                 tf.keras.metrics.Precision(name=\"precision\"),\n",
    "                 tf.keras.metrics.Recall(name=\"recall\")]\n",
    "    )\n",
    "    return model\n",
    "\n",
    "# -------- Hilfen --------\n",
    "def subject_id_from_path(path):\n",
    "    # extrahiert \"Sxx\" aus \".../Sxx/Sxx.pkl\"\n",
    "    m = re.search(r\"(S\\d+)\\.pkl$\", path)\n",
    "    if m: \n",
    "        return m.group(1)\n",
    "    m = re.search(r\"/(S\\d+)/\", path)\n",
    "    return m.group(1) if m else os.path.basename(path)\n",
    "\n",
    "# -------- LOSO Training --------\n",
    "out_root = \"/kaggle/working/models_wesad_loso\"\n",
    "os.makedirs(out_root, exist_ok=True)\n",
    "\n",
    "subjects = [(subject_id_from_path(p), p) for p in file_path if os.path.exists(p)]\n",
    "subjects = sorted(subjects, key=lambda x: int(re.findall(r\"\\d+\", x[0])[0]))  # sortiert nach Nummer\n",
    "\n",
    "results = []\n",
    "print(f\"Folds: {[sid for sid,_ in subjects]}\")\n",
    "\n",
    "for test_sid, test_pkl in subjects:\n",
    "    print(f\"\\n=== Test: {test_sid} ===\")\n",
    "    # Test laden\n",
    "    X_te_raw, y_te_raw = load_wesad_subject_pkl(test_pkl)\n",
    "    Xte, yte = window_data(X_te_raw, y_te_raw)\n",
    "    if len(Xte) == 0:\n",
    "        print(f\"  -> keine Fenster für {test_sid}, weiter\")\n",
    "        continue\n",
    "\n",
    "    # Train stapeln\n",
    "    Xtr_list, ytr_list = [], []\n",
    "    for train_sid, train_pkl in subjects:\n",
    "        if train_sid == test_sid: \n",
    "            continue\n",
    "        X_raw, y_raw = load_wesad_subject_pkl(train_pkl)\n",
    "        Xw, yw = window_data(X_raw, y_raw)\n",
    "        if len(Xw) == 0:\n",
    "            continue\n",
    "        Xtr_list.append(Xw); ytr_list.append(yw)\n",
    "\n",
    "    Xtr = np.concatenate(Xtr_list, axis=0)\n",
    "    ytr = np.concatenate(ytr_list, axis=0)\n",
    "    print(f\"  Train windows: {len(Xtr)} | Test windows: {len(Xte)} | Pos.rate(train)={ytr.mean():.3f}\")\n",
    "\n",
    "    # Normalisierung\n",
    "    Xtr_n, Xte_n, mean, std = zscore_fit_transform(Xtr, Xte)\n",
    "\n",
    "    # Class Weights\n",
    "    classes = np.array([0,1])\n",
    "    cw_vals = compute_class_weight(class_weight=\"balanced\", classes=classes, y=ytr)\n",
    "    class_weight = {0: float(cw_vals[0]), 1: float(cw_vals[1])}\n",
    "\n",
    "    # tf.data\n",
    "    BATCH=64\n",
    "    ds_tr_all = tf.data.Dataset.from_tensor_slices((Xtr_n, ytr.astype(\"float32\"))).shuffle(10000).batch(BATCH).prefetch(2)\n",
    "\n",
    "    # kleines Val-Set abspalten\n",
    "    val_frac = 0.1\n",
    "    n_val = max(int(len(Xtr_n)*val_frac), 1)\n",
    "    X_val, y_val = Xtr_n[:n_val], ytr[:n_val]\n",
    "    X_trn, y_trn = Xtr_n[n_val:], ytr[n_val:]\n",
    "    ds_trn = tf.data.Dataset.from_tensor_slices((X_trn, y_trn.astype(\"float32\"))).shuffle(10000).batch(BATCH).prefetch(2)\n",
    "    ds_val = tf.data.Dataset.from_tensor_slices((X_val, y_val.astype(\"float32\"))).batch(BATCH).prefetch(2)\n",
    "    ds_te  = tf.data.Dataset.from_tensor_slices((Xte_n, yte.astype(\"float32\"))).batch(BATCH).prefetch(2)\n",
    "\n",
    "    # Modell & Callback\n",
    "    model = make_lstm_model(timesteps=Xtr_n.shape[1], n_features=Xtr_n.shape[2])\n",
    "    cbs = [\n",
    "        callbacks.EarlyStopping(patience=8, restore_best_weights=True, monitor=\"val_auc\", mode=\"max\"),\n",
    "        callbacks.ReduceLROnPlateau(patience=4, factor=0.5, monitor=\"val_auc\", mode=\"max\")\n",
    "    ]\n",
    "\n",
    "    # Train\n",
    "    history = model.fit(\n",
    "        ds_trn,\n",
    "        validation_data=ds_val,\n",
    "        epochs=60,\n",
    "        class_weight=class_weight,\n",
    "        verbose=0,\n",
    "        callbacks=cbs\n",
    "    )\n",
    "\n",
    "    # Eval\n",
    "    yprob = model.predict(ds_te, verbose=0).ravel()\n",
    "    ypred = (yprob >= 0.5).astype(int)\n",
    "    try:\n",
    "        auc = float(roc_auc_score(yte, yprob))\n",
    "    except:\n",
    "        auc = float(\"nan\")\n",
    "    report = classification_report(yte, ypred, output_dict=True, zero_division=0)\n",
    "\n",
    "    res = {\n",
    "        \"test_subject\": test_sid,\n",
    "        \"auc\": auc,\n",
    "        \"precision_pos\": float(report[\"1\"][\"precision\"]),\n",
    "        \"recall_pos\": float(report[\"1\"][\"recall\"]),\n",
    "        \"f1_pos\": float(report[\"1\"][\"f1-score\"]),\n",
    "        \"support_pos\": int(report[\"1\"][\"support\"])\n",
    "    }\n",
    "    results.append(res)\n",
    "    print(f\"  AUC={res['auc']:.3f} | F1(stress)={res['f1_pos']:.3f} | P={res['precision_pos']:.3f} R={res['recall_pos']:.3f}\")\n",
    "\n",
    "    # Speichern\n",
    "    fold_dir = os.path.join(out_root, test_sid)\n",
    "    os.makedirs(fold_dir, exist_ok=True)\n",
    "    model.save(os.path.join(fold_dir, \"model.keras\"))\n",
    "    np.save(os.path.join(fold_dir, \"norm_mean.npy\"), np.array(mean))\n",
    "    np.save(os.path.join(fold_dir, \"norm_std.npy\"),  np.array(std))\n",
    "\n",
    "# Gesamtergebnisse\n",
    "df_results = pd.DataFrame(results).sort_values(\"test_subject\")\n",
    "print(\"\\n=== LOSO Summary ===\")\n",
    "print(df_results.to_string(index=False))\n",
    "\n",
    "# ---------------- Inferenz-Funktion für deine eigenen Daten ----------------\n",
    "from tensorflow.keras.models import load_model\n",
    "\n",
    "def predict_stress_on_timeseries(raw_df_or_np, model_dir, threshold=0.5):\n",
    "    \"\"\"\n",
    "    raw_df_or_np: shape (T, n_features) – gleiche Feature-Reihenfolge wie im Training (EDA, BVP, TEMP[, ACCx,y,z])\n",
    "    model_dir: z.B. '/kaggle/working/models_wesad_loso/S2'\n",
    "    Rückgabe: probs (p(stress) je Fenster), preds (0/1 je Fenster)\n",
    "    \"\"\"\n",
    "    if isinstance(raw_df_or_np, pd.DataFrame):\n",
    "        Xraw = raw_df_or_np.values\n",
    "    else:\n",
    "        Xraw = np.asarray(raw_df_or_np)\n",
    "\n",
    "    # Hier wird angenommen, dass Xraw bereits bei 4 Hz liegt. Falls nicht: resample_poly pro Spalte anwenden.\n",
    "\n",
    "    # 60s-Fenster bilden (Labels egal, nur für Funktion erforderlich)\n",
    "    dummy = np.ones(len(Xraw), dtype=int)\n",
    "    Xw, _ = window_data(Xraw, dummy)\n",
    "    if len(Xw) == 0:\n",
    "        raise ValueError(\"Zu kurze Sequenz für ein 60s Fenster (>= 240 Samples @4Hz erforderlich).\")\n",
    "\n",
    "    # Normierung laden\n",
    "    mean = np.load(os.path.join(model_dir, \"norm_mean.npy\"))\n",
    "    std  = np.load(os.path.join(model_dir, \"norm_std.npy\"))\n",
    "    Xw_n = (Xw - mean) / (std + 1e-8)\n",
    "\n",
    "    # Modell laden und vorhersagen\n",
    "    model = load_model(os.path.join(model_dir, \"model.keras\"))\n",
    "    probs = model.predict(Xw_n, verbose=0).ravel()\n",
    "    preds = (probs >= threshold).astype(int)\n",
    "    return probs, preds\n",
    "\n",
    "# Beispiel-Aufruf für eigene Daten (auskommentiert):\n",
    "# my_data = np.random.randn(2400, len(WRIST_STREAMS))  # 10 Minuten @4Hz, Platzhalter\n",
    "# probs, preds = predict_stress_on_timeseries(my_data, \"/kaggle/working/models_wesad_loso/S2\")\n",
    "# print(probs[:5], preds[:5])\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7192727,
     "sourceId": 11476463,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3160.581301,
   "end_time": "2025-09-12T13:26:01.212388",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-12T12:33:20.631087",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
